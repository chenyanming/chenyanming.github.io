[{"categories":null,"content":"You may not know: there is one type of metadata in Calibre, called folder metadata. It is also be used in elink device if you use calibre to transfer files to elink device. A hidden file named .metadata.calibre.\nUnlike the original database metadata.db, metadata needs ebooks be resided inside a non-flat folder, while the .metadata.calibre is a json file, and it has all the metadata for all documents/ebooks under one flat folder.\nTherefore, by parsing .metadata.calibre, we can manage all documents inside one flat folder using calibredb.el - The documents management software inside Emacs. What amazing thing is that, after generating the folder meatadata, calibredb.el can smartly filter metadata with live filter feature without using calibre or other calibre command lines, making it also be able to manage ebooks inside Android Emacs where it is unable to install calibre on Termux at this moment.\nInstall or update calibredb.el to the latest version.\nGenerate the folder metadata: .metadata.calibre Launch calibre, Connect/Share, Connect to folder, then .metadata.calibre was generated in that folder, finally you can close calibre.\nConfig calibredb.el There is only three things to configure, that is setup calibredb-root-dir to point to the document folder, calibredb-db-dir points to the .metadata.calibre. and calibredb-library-alist holds all libraries.\nHere are the examples showing that I have added many different libraries (for example, I sometimes download files from Telegram and switch to emacs to read them, so it worths as a single library). You can add as many as you want! Don’t limit to only one library!\n(setq calibredb-root-dir \"/home/damonchan/Data/Books/\") (setq calibredb-db-dir (expand-file-name \".metadata.calibre\" calibredb-root-dir)) (setq calibredb-library-alist `((,calibredb-root-dir) ;; Ebooks (,(pcase system-type ('gnu/linux (expand-file-name \"~/Data/Ebooks/Calibre\")) ('darwin (expand-file-name \"~/Ebooks/Calibre\")))) (,(expand-file-name \"web_doc\" org-directory)) ;; telegram folder (,(pcase system-type ('gnu/linux (expand-file-name \"~/Downloads/Telegram Desktop\")) ('darwin (expand-file-name \"~/Downloads/Telegram Desktop\")) ('android (expand-file-name \"/storage/emulated/0/Download/Telegram/\")))) ;; opds (\"http://arxiv.maplepop.com/catalog/\") (\"https://m.gutenberg.org/ebooks.opds/\") (\"http://aozora.textlive.net/catalog.opds\") (\"https://opds.wol.moe/zh_CN\") (\"http://opds.chaoxing.com/\"))) Run calibredb.el 1 M-x cabliredb Do live search with /, enter to open the file, or press . to open dired. N or P switch between libraries.\nDemo\nPlease notice that not all features designed for calibredb metadata database are usable. But search and open is working alright. If you need to add or delete file, you need to generate the .metadata.calibre using calibre again to refresh the metadata. Because calibredb.el is not able to generate .metadata.calibre at this moment.\nBonus Tip I love flat folder, so that I can use paw.el to manage ebooks annotations across devices (android and desktop).\nEnjoy\n","description":"","tags":["emacs","technology"],"title":"How I manage documents if all of them in one flat folder using calibredb.el","uri":"/post/20250213t191758--how-i-manage-documents-if-all-of-them-in-one-flat-folder-using-calibredbel__emacs_technology/"},{"categories":["Emacs"],"content":"If you’re using paw.el, the language learning and annotation tool for Emacs, integrating AI responses into your workflow becomes seamless. By using gptel, you can easily display AI-generated responses in the *paw-view-note* buffer with functions like paw-view-note and paw-new-entry. Additionally, you can use Edge-TTS to vocalize the response, employ go-translate for translation, and further interact with or add the information to your database right from the *paw-view-note* buffer.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 (defun gptel-quick (\u0026optional query) \"ASK AI with predefined prompts, show it in paw-view-note buffer, and say it out!\" (interactive) (require 'gptel) (let* ((selected-text (when (use-region-p) (buffer-substring-no-properties (region-beginning) (region-end)))) ;; (current-buffer-text (buffer-substring-no-properties (point-min) (point-max))) (additional-text (or selected-text \"\")) (prompt (completing-read \"Ask AI: \" '(\"Draft an outline\" \"Draft anything\" \"Draft an email\" \"Draft a journal entry\" \"Draft a meeting agenda\" \"Explain in 12 words or less\" \"Explain in 48 words or less\" \"Explain in 100 words or less\" \"Explain in 200 words or less\" \"Write anything\" \"Brainstorm ideas\" \"Translate it to Chinese\")))) (when (string= prompt \"\") (user-error \"A prompt is required.\")) (deactivate-mark) (setq gptel-last-prompt (format \"%s. %s\" prompt additional-text)) (gptel-request (or query gptel-last-prompt) :system \"You are an AI assistant that lives inside Emacs\" :callback (lambda (response info) (if (not response) (message \"gptel-quick failed with message: %s\" (plist-get info :status)) (with-current-buffer (get-buffer-create \"*gptel-quick*\") (let ((paw-say-word-p t) ;; say the response out (lang (paw-check-language response))) (paw-view-note (paw-new-entry response :origin_type \"gptel\" :serverp 3 :lang lang :context (format \"Question: %s\\nAnswer: %s\" gptel-last-prompt response)) :buffer-name paw-view-note-buffer-name :display-func 'switch-to-buffer)))))))) ","description":"","tags":["ai","paw","emacs"],"title":"How to show AI response and speak it out with AI sound engine in Emacs?","uri":"/post/20250130t003019--how-to-show-ai-response-and-speak-it-out-with-ai-sound-engine-in-emacs__ai_paw_technology/"},{"categories":["Technology"],"content":" My personal experience Evernote I’ve spent many years building a lifelong personal library. A couple of years back, the first time I tried to manage my Ebooks is using Evernote. I saved every single document into Evernote, from diaries to notes, from lecture notes to reference books.\nHowever, when my notes number larger than 1000, it is very difficult for me to locate the documents.\nFinally, I found Evernote really sucks on document management. It may be good for information storage but definitely not for document management. Even the advanced search feature still sucks, and the note size also has limitations.\nFile Explorer Then I came back to the old but effective way, using the File Explorer and making all the documents nested inside the well-structured folder structure.\nBut wait, the problem is still there, once my documents getting more and more, how can I search them in a second? And most importantly, how can I manage them, classify them, and even reuse/reference them when I needed. Besides, How can I save the web pages for reading them later, how can I save the online videos and never lost them?\nLet’s talk about Document Management DMS (Document Management System) Document management is very common in Business, there are also many Document management system (DMS) out there, the purpose of such systems are to receive, track, versions, manage and store documents and reduce paper.\nPDMS (Personal Document Management System) Personal documents have not much attention before, there may be some solutions, such as Evernote, Devonthink, etc. But they have many drawbacks:\nYou have to pay for using them You may need to save your content to the software providers, no one can promise you they will help you to save them permanently. Lots of limitations and rely on managing the software itself rather than managing our content. Do you have some ideas but do not know how to structure them and make values from them? Do you want to save the documents in a single place and locate them as fast as possible? Do you have too many documents and have no way to manage them properly? Do you want to save the web pages permanently and read them without relying on internet services? Do you want to save your favorite online audio or video a life and manage them easily??\nThen you need to build a Personal Document Management System.\nIn the section of Capturing, I will show you how to capturing and structuring your ideas with Mindmap and Org-mode.\nThen, in the section of Archive, I will show you how to build your PDMS with some open sources tools, and you do not need to worry about the prices or how long you can keep on using them, since they are free for life, and all data are saved locally, permanently, easily be managed within a single index database.\nTwo Steps to Build a Personal Document Management System Capturing The first step is capturing the ideas generated from your life.\nMindmap Mindmap is such a great tool to visually organize information and brainstorm.\nBoeing used the mind map when designing the Boeing 747. According to Boeing people, if you use the usual method, it takes six years to design a large project like the Boeing 747. However, by using mind maps, their engineers completed the Boeing 747 design in just six months and saved $10 million…\nMindmapping is nothing complicated and just 5 steps, you just need a pen and a paper, then you can record and integration of divergent thinking at any time.\nStart with a Central idea. Draw four (or more) branches. Draw (sub)branches clock-wise. One short word/sentence one branch. Color the branches outline. I prefer drawing by hand, either with a real pen or e-pen on an iPad or asurface, since I really enjoy the “Coloring”, it is even a great therapy to make me peaceful, generating more ideas.\nHere is a Mindmap I drew before — What a Raspberry Pi Can Do:\nFigure 1: What a Raspberry Pi can do\nOutline and org-mode Outline is another format of Mind-mapping, but from top to bottom. It is possible to keep the content of large files well-structured, visually cycling, and editing between trees. It is so simple to work with. And it also has all mindmap benefits, such s information organization, visual management, brainstorming, well-structured, etc.\nIf you want to make your ideas values, try org-mode, it is the best editing format out there, simple as Markdown, but way more powerful than that.\nHere are some benefits:\norg-mode can generate any formats that you want org-mode is the best option for Writers/Editors/Researchers/Bloggers. Bloggers can use hugo and ox-hugo, to easily generate the whole blog website, without managing the web, just focus on the writing org files. Run source codes alive with org-babel. Inside org-mode, you can insert source code blocks, run them inside your text file, and output the results in the same file. Unlike the jupyter-notebook, org-mode supports numerous possible languages (C, Java, Python, Ruby, R, …). Mouse interaction is optional, it is so natural to just press a single “TAB” key, you can hide/show/cycle the all sections, focusing on what you are editing. Images previewing, drag and drop. Recursively search with rg. Best Evernote/OneNote replacement, with deft, and cloud synchronization with any cloud providers. Capturing ideas with org-capture, it provides a great tempting system, no panic of any interruption! Tons of extensions. Archive Build a library index The best way to manage the documents is to manage their metadata, in an index database.\nYou have a ton of resources you do not want to lose, for example,\nEbooks Papers Read It later web pages Documents Technical Documents YouTube’s audios and videos Building a library index is also simple with just some great open source tools.\nEbooks/Documents\nThe first solution you may know is calibre GUI, maybe you also try to use it, and found it is so frustrating.\nHere are some reasons:\nYou may not know how to manage the documents properly. You may not realize the benefits of managing the ebooks and any other documents. Many front-ends alternatives, not just the official one. Tools are optional, the idea behind it is precious. Don’t be upset! It is such a great tool to provides us a refreshing way to see how our personal library should look like — An Index Table.\nBuild a document index is the key of build a lifelong personal library.\nThe index is small and portable to keep. The index is easy to be modified. The index is independent of the documents. You can find the documents in a second. You do not need to rely on internet service providers. Everything is free, you do not need to worry about the money. No privacy issue, all in local, within one index table. You can keep it a life. calibre\nThe most important thing to do is of course install calibre. It can help us to set up the Calibre Database and Calibre Library which we will work on it later without the calibre GUI.\nCalibre Database is a database file called metadata.db generated by calibre, the Calibre Library is the directory that holds your documents added into the Calibre Database.\nFigure 1: Calibre Library \u0026 Calibre Database\ncalibre-web\nSetup calibre-web to access your Calibre Library at any time.\nPS: You can set up a telegram bot in Raspberry Pi or directly on your phone with Termux.\ncalibredb \u0026 calibredb.el\nCalibredb is the command-line tool that comes with Calibre, we will use it to create more possibilities.\nTelegram Bot with calibredb\nI created a project — Pibot. You can send documents to it, it will save the documents to Calibre Library using calibredb in the background. The documents will be saved both on telegram apps and on your Calibre Library.\nFigure 1: Archive Book with Pibot\nFigure 1: Search Book with Pibot\nPS: You can set up a telegram bot in Raspberry Pi or directly on your phone with Termux.\ncalibredb.el\nI recommend using calibredb.el, a front-end of calibredb.\nFigure 1: calibredb.el\nThe dashboard is also the index table. It is inside Emacs, it works well with org-mode. You can search them in a second, in real-time. By building the virtual libraries with searching keywords. Generating an org file to include all file locations and you can just search within it. Add/remove/tagging/favorite/archive the items with just pressing a single key. Here is the live filter feature:\nFigure 1: Live Filtering on calibredb.el\nLibrera Reader\nFigure 1: Librera Reader\nLibrera Reader is an open-source E-Reader Application on Android. It has a great feature that it can scan your phones’ directory and show all your documents in the dashboard with preview images. Since Calibre Database is only an index of all your documents, all your documents will be saved under Calibre Library location, Librera Reader does a great job and finds out all documents in it! Of course, the first thing you need to do is to set up a synchronization bridge between your server’s Calibre Library and your phone.\nWeb Pages (Read It Later)\nPeople read online. Sometimes, you find some interesting posts and want to save it forever, how to do it? You may know Pocket, but the contents are saved on Pocket’s server, we can only read our contents within Pocket. Not mention we need to pay for it for premium features, but what if somedays, Pocket is no longer operating, where our contents will go at that time? My purpose to build a lifelong solution.\nWith some open-source tools, it becomes so simple.\nNormally, when you find something interesting, you must know its link. What we need to do, is just download the webpage into a EPUB/PDF, sometimes, convert it with pandoc to a preferred format, and save to our Calibre Library. In this way, we can benefit from managing just one index database as well, locally and permanently.\nI created a telegram bot called — Readit. If I find something interesting, I will send the link to Readit, it will automatically download the webpage with percollate, turn it into EPUB/PDF and add it into my Calibre Library. By the way, send back the downloaded file to me in the chat. Since my Calibre Library is synchronized to my phone, I can read the files with Librera Reader as well. Of course, I can read the document in my laptop with calibredb.el or calibre-web. All happen in the background, and all are saved locally, permanently, and of course, free of charge.\nPS: Readit will be open-sourced later. But you can build your own, just with some simple python.\nAudios/Videos\nTelegram Bot with youtube-dl\nAs I mentioned before — Pibot, actually, Pibot is not just for document archiving/searching, it can be also used as a youtube downloader (using youtube-dl), you can turn telegram into mp3 player and archive your favorite youtube music/video locally, forever.\nAudio/Video Database: Plex Server\nSet up a Plex Server to scan your audio/video directory, you can access the audio/videos with your phones/browser anytime, anywhere.\nOnce you send a link to Telegram Bot, pibot will download the audio/videos, and Plex will know audios/videos are added into the directory, then it will automatically be added into Plex Library, so that you can access them just like accessing youtube.\nFigure 1: Plex\nPS: You can set up Plex in Raspberry Pi or with a NAS/router.\nTell me If you find my ideas are interesting and want me to share more, please share it, tell me or ask me. I am always here to help you.\n","description":"","tags":["pi","emacs","system"],"title":"How to build a Personal Document Management System (PDMS) and why you need it","uri":"/post/calibredb/"},{"categories":["Technology"],"content":" Do you think Emacs’s performance in windows is bad? Do you really want to use a native Speed Emacs in Windows? Do you hate the unnatural path transition between windows convention and Linux convention? Do you feel frustrated when you try to install and configure Emacs in WSL? Do you just want to taste the power of Emacs running in WSL 2?\nThis tutorial may help you :)\nWhat is WSL? Earlier on August 2, 2016, Microsoft released Windows Subsystem for Linux (WSL), enabling the native way to run Linux Tools in Windows 10 and Windows Server 2019.\nIn May 2019, WSL 2 was introduced, by importing the Real Linux Kernel through Hyper-V features (in a Virtual Machine Environment), providing the users with the full \u0026 immerse way to work with Linux under windows, with 20 times the read/write performances of WSL 1.\nFor Windows Emacs Users, here are some advantages/disadvantages for you to consider before switching the WSL 2:\nAdvantages The performance of Magit is way faster than the GNU compiled original windows Emacs-27 binaries. The Font Rendering is better. No flickering. interoperability between Windows and Linux. Native OneDrive support. Super fast boot up time for Emacs. Disadvantages The network configuration is a pain, workaround is available. X11 may lost connection when network changes. More Details More details of the differences between WSL 1 and WSL 2, check https://docs.microsoft.com/en-us/windows/wsl/compare-versions.\nTaste WSL 2 Install and enable WSL 2 Update Windows 10 The first step is to make sure you have updated to the latest Windows 10. For Windows 10 Versions 1903 \u0026 1909 users, make sure the minor version number is 1049, according to Microsoft’s Devblog.\nInstall WSL 2 1 Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Enable WSL 2 1 dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart Check WSL version 1 wsl -l -v There are many people who may be not able to run the above commands, just make sure you have updated to the latest windows. https://devblogs.microsoft.com/commandline/wsl-2-support-is-coming-to-windows-10-versions-1903-and-1909/\nSet default WSL version to 2 1 wsl.exe --set-default-version 2 All later WSL Distros are installed will be WSL 2. No worries, you can switch between WSL 1 and WSL 2 with just one command without pain, just do it~\nInstall Ubuntu 18.04 in Microsoft Store Optional: Convert WSL 1 to WSL 2 If you already installed some Distros before but they are in WSL 1, no worries, it is very easy to switch from WSL 1 to WSL 2:\n1 wsl.exe --set-version Ubuntu-18.04 2 Choosing the terminal The first step to talk to WSL 2 is via Terminal Applications. In macOS, we have iTerm2, how about Windows? You may wonder we could just use the default Ubuntu Terminal, but it lacks UTF8 and Unicode supports, and only a few configuration options. Apparently, it is not the best option. We just need a more powerful and modern terminal. Luckily, Microsoft brings us another great product - Windows Terminal, and it is ranked with 67.6k stars in GitHub up to the time this article composed.\nWindows Terminal has the following benefits compared with other terminals:\nWindows Terminal is multi-tabs and multi-panels. UTF8 \u0026 Unicode support. Supports Command Prompt, PowerShell, and WSL. GPU accelerated Text Rendering Engine. Custom Themes, styles and configurations. Modern and user-friendly. Open Source and Official Support. Install windows Terminal in Microsoft Store Windows Terminal Windows Terminal’s setting is implemented in a json file - settings.json, every time you modify and save the file, it will take effects immediately, nice!\nAdd “cursorShape” and “fontFace” to the “defaults” section, it will apply on all tabs\n1 2 3 4 5 6 \"defaults\": { // Put settings here that you want to apply to all profiles. \"cursorShape\": \"filledBox\" , \"fontFace\": \"JetBrains Mono\" } Update the home directory\n1 2 3 4 5 6 7 8 { \"guid\": \"{c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40}\", \"hidden\": false, \"name\": \"Ubuntu-18.04\", \"source\": \"Windows.Terminal.Wsl\", \"startingDirectory\": \"//wsl$/Ubuntu-18.04/home/damonchan\" } Disable keyboard cursor blink\nDisable globally in keyboard setting:\nzsh I like to use zsh which provides more enhancement and configuration options compared with Bash.\n1 2 3 sudo apt install zsh chsh -s $(which zsh) sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" Fonts Just create a soft link from Windows to Ubuntu:\n1 2 ln -s /mnt/c/Windows/Fonts ~/.fonts fc-cache -fv OneDrive Just link Windows OneDrive Root Directory to Ubuntu:\n1 ln -s /mnt/c/Users/elecm/OneDrive ~/OneDrive X11 Server (VcXsrv) In this tutorial, we choose VcXsrv as X11 server.\nInstall VcXsrv 1 choco install vcxsrv Configure VcXsrv Start XLunch (VcXsrv)\nMultiple windows -\u003e Display number: -1 -\u003e Next\nStart no client\nTick Clipboard, Primary Selection, Native opengl, Disable access control (If you use socat to do X11 forwarding, Access control can be enabled, check Other Methods below) -\u003e Next\nSave configuration PS:\nPress “Win + R” -\u003e insert shell:startup -\u003e Press Enter Save to startup can start X11 server when system boots Finish\nallow both Private and Public network in windows firewall setting Control Panel\\System and Security\\Windows Defender Firewall\\Allowed apps\nDisable /etc/resolv.conf generation We disable /etc/resolv.conf generation, so that we can use custom name servers which points to google. vi /etc/wsl.conf\n1 2 [network] generateResolvConf = false Setup custom name servers and point to google vi /etc/resolv.conf\n1 2 3 4 5 # This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf: # [network] # generateResolvConf = false nameserver 8.8.8.8 nameserver 8.8.4.4 Export DISPLAY and LIBGL_ALWAYS_INDIRECT settings to ~/.zshrc vi ~/.zshrc\n1 2 export DISPLAY=$(ip route | awk '{print $3; exit}'):0 export LIBGL_ALWAYS_INDIRECT=1 Other Methods There is another way to enable the X11 forwarding through socat, check this github issue. It is more safe but has some performance lost.\nHiDPI Right click XLaunch (VcXsrv) -\u003e Compatibility -\u003e Change high DPI settings -\u003e Tick Override high DPI scaling Behavior, Application.\nAdd the following statement to .zshrc\n1 export GDK_SCALE=2 Bigger Cursor Supposed VcXsrv is installed in C:\\Program Files\\VcXsrv\\,\nInstall big-cursor\n1 sudo apt install big-cursor Rename C:\\Program Files\\VcXsrv\\fonts\\misc\\cursor.pcf.gz to C:\\Program Files\\VcXsrv\\fonts\\misc\\cursor-small.pcf.gz\nCopy /usr/share/fonts/X11/misc/big-cursor.pcf.gz from WSL to as C:\\Program Files\\VcXsrv\\fonts\\misc\\cursor.pcf.gz\nSetup Emacs Let’s dive into the meat of Compiling and installing the latest Emacs 27.1!\ninstall dependencies 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 sudo apt install -y autoconf automake autotools-dev bsd-mailx build-essential \\ diffstat gnutls-dev imagemagick libasound2-dev libc6-dev libdatrie-dev \\ libdbus-1-dev libgconf2-dev libgif-dev libgnutls28-dev libgpm-dev libgtk2.0-dev \\ libgtk-3-dev libice-dev libjpeg-dev liblockfile-dev liblqr-1-0 libm17n-dev \\ libmagickwand-dev libncurses5-dev libncurses-dev libotf-dev libpng-dev \\ librsvg2-dev libsm-dev libthai-dev libtiff5-dev libtiff-dev libtinfo-dev libtool \\ libx11-dev libxext-dev libxi-dev libxml2-dev libxmu-dev libxmuu-dev libxpm-dev \\ libxrandr-dev libxt-dev libxtst-dev libxv-dev quilt sharutils texinfo xaw3dg \\ xaw3dg-dev xorg-dev xutils-dev zlib1g-dev libjansson-dev libxaw7-dev \\ libselinux1-dev libmagick++-dev libacl1-dev gir1.2-javascriptcoregtk-4.0 \\ gir1.2-webkit2-4.0 libenchant1c2a libglvnd-core-dev libicu-le-hb-dev \\ libidn2-0-dev libjavascriptcoregtk-4.0-dev liboss4-salsa2 libsoup2.4-dev \\ libsystemd-dev libwebkit2gtk-4.0-dev libx11-xcb-dev libxcb-dri2-0-dev \\ libxcb-dri3-dev libxcb-glx0-dev libxcb-present-dev libxshmfence-dev \\ x11proto-composite-dev x11proto-core-dev x11proto-damage-dev \\ x11proto-fixes-dev Download, compile and install 1 2 3 4 5 6 7 8 cd ~ wget https://ftp.gnu.org/pub/gnu/emacs/emacs-27.1.tar.gz tar -xzvf emacs-27.1.tar.gz cd emacs-27.1 ./configure make sudo make install rm ~/emacs-27.1.tar.gz Install doom 1 2 git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d ~/.emacs.d/bin/doom install Start Emacs 1 emacs Please notice:\nThe first time to start Emacs may need some times (Every time the first time to start Emacs after system boots, it also needs some time at times), font setting, x11 checking, sound checking etc, please wait a moment. Normally it will finish within one or two minute. After refreshing font setting through fc-cache -fv, Emacs will take some time to configure the font setting, but it will only conduct one time. The second time to start Emacs will resume to the normal startup time. Fix WSL_INTEROP issue When you start Emacs, it will create another interop file, it make us can not start windows programs in Emacs, we can make it to use the one same interop file with the terminal.\nAdd the following to .zshrc\n1 2 3 4 5 6 7 8 9 10 # fix interop fix_wsl2_interop() { for i in $(pstree -np -s $$ | grep -o -E '[0-9]+'); do if [[ -e \"/run/WSL/${i}_interop\" ]]; then export WSL_INTEROP=/run/WSL/${i}_interop fi done } ~/.emacs.d/bin/doom env \u003e /dev/null 2\u003e\u00261 Optional: Setup Python Development Environment pyenv 1 2 3 4 5 6 7 sudo apt-get install git gcc make openssl libssl-dev libbz2-dev libreadline-dev libsqlite3-dev libffi-dev git clone https://github.com/pyenv/pyenv.git ~/.pyenv echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' \u003e\u003e ~/.zshrc echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' \u003e\u003e ~/.zshrc echo -e 'if command -v pyenv 1\u003e/dev/null 2\u003e\u00261; then\\n eval \"$(pyenv init -)\"\\nfi' \u003e\u003e ~/.zshrc pyenv install 3.7.9 pyenv global 3.7.9 mypyls mspyls can be installed by typing M-x lsp-install-server RET mspyls.\nOptional: Setup Node.js Development Environment node Install nvm\n1 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash Add to .zshrc\n1 2 3 export NVM_DIR=\"$HOME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 \\. \"$NVM_DIR/nvm.sh\" # This loads nvm [ -s \"$NVM_DIR/bash_completion\" ] \u0026\u0026 \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion 1 2 3 4 nvm install --lts nvm use --lts npm i -g javascript-typescript-langserver .emacs.d/bin/doom sync Optional: Setup Rust Development Environment 1 2 3 4 5 6 curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh rustup component add rust-src sudo curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-linux -o /usr/bin/rust-analyzer sudo chmod +x /usr/bin/rust-analyzer cargo install cargo-check rustup component add clippy-preview Optional: Install other useful packages apt With apt\n1 sudo apt install calibre sqlite3 pandoc pdf-tools 1 2 sudo apt install libpng-dev zlib1g-dev libpoppler-glib-dev libpoppler-private-dev M-x pdf-tools-install rga 1 2 3 4 5 6 sudo apt install build-essential pandoc poppler-utils ffmpeg wget https://github.com/phiresky/ripgrep-all/releases/download/v0.9.6/ripgrep_all-v0.9.6-x86_64-unknown-linux-musl.tar.gz tar -zxvf ripgrep_all-v0.9.6-x86_64-unknown-linux-musl.tar.gz cd ripgrep_all-v0.9.6-x86_64-unknown-linux-musl sudo cp rga /usr/bin sudo cp rga-preproc /usr/bin Rime Install and setup Rime\n1 2 3 4 5 6 7 8 9 10 sudo apt install git build-essential cmake libboost-all-dev libgoogle-glog-dev libleveldb-dev libmarisa-dev libopencc-dev libyaml-cpp-dev libgtest-dev cd /usr/src/gtest sudo cmake CMakeLists.txt sudo make #copy or symlink libgtest.a and libgtest_main.a to your /usr/lib folder sudo cp *.a /usr/lib cd ~/.emacs.d/librime make sudo make install sudo apt-get install ibus-rime PS: It is better to not share Rime User folder between windows and WSL, it may cause troubles.\nIn Emacs\n1 M-x rime-compile-module plum\n1 2 curl -fsSL https://git.io/rime-install | bash # rime_dir=\"$HOME/.rime\" bash rime-install sdcv 1 sudo apt install stardict sdcv telega 1 2 3 4 5 6 7 8 9 sudo apt install gperf git clone https://github.com/tdlib/td.git cd td mkdir build \u0026\u0026 cd build \u0026\u0026 cmake ../ make sudo make install git clone https://github.com/zevlg/telega.el cd telega.el make \u0026\u0026 make install An .zshrc example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 # If you come from bash you might have to change your $PATH. # export PATH=$HOME/bin:/usr/local/bin:$PATH # Path to your oh-my-zsh installation. export ZSH=\"/home/damonchan/.oh-my-zsh\" # Set name of the theme to load --- if set to \"random\", it will # load a random theme each time oh-my-zsh is loaded, in which case, # to know which specific one was loaded, run: echo $RANDOM_THEME # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes ZSH_THEME=\"robbyrussell\" # Set list of themes to pick from when loading at random # Setting this variable when ZSH_THEME=random will cause zsh to load # a theme from this variable instead of looking in $ZSH/themes/ # If set to an empty array, this variable will have no effect. # ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" ) # Uncomment the following line to use case-sensitive completion. # CASE_SENSITIVE=\"true\" # Uncomment the following line to use hyphen-insensitive completion. # Case-sensitive completion must be off. _ and - will be interchangeable. # HYPHEN_INSENSITIVE=\"true\" # Uncomment the following line to disable bi-weekly auto-update checks. # DISABLE_AUTO_UPDATE=\"true\" # Uncomment the following line to automatically update without prompting. # DISABLE_UPDATE_PROMPT=\"true\" # Uncomment the following line to change how often to auto-update (in days). # export UPDATE_ZSH_DAYS=13 # Uncomment the following line if pasting URLs and other text is messed up. # DISABLE_MAGIC_FUNCTIONS=\"true\" # Uncomment the following line to disable colors in ls. # DISABLE_LS_COLORS=\"true\" # Uncomment the following line to disable auto-setting terminal title. # DISABLE_AUTO_TITLE=\"true\" # Uncomment the following line to enable command auto-correction. # ENABLE_CORRECTION=\"true\" # Uncomment the following line to display red dots whilst waiting for completion. # COMPLETION_WAITING_DOTS=\"true\" # Uncomment the following line if you want to disable marking untracked files # under VCS as dirty. This makes repository status check for large repositories # much, much faster. # DISABLE_UNTRACKED_FILES_DIRTY=\"true\" # Uncomment the following line if you want to change the command execution time # stamp shown in the history command output. # You can set one of the optional three formats: # \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\" # or set a custom format using the strftime function format specifications, # see 'man strftime' for details. # HIST_STAMPS=\"mm/dd/yyyy\" # Would you like to use another custom folder than $ZSH/custom? # ZSH_CUSTOM=/path/to/new-custom-folder # Which plugins would you like to load? # Standard plugins can be found in $ZSH/plugins/ # Custom plugins may be added to $ZSH_CUSTOM/plugins/ # Example format: plugins=(rails git textmate ruby lighthouse) # Add wisely, as too many plugins slow down shell startup. plugins=(git) source $ZSH/oh-my-zsh.sh # User configuration # export MANPATH=\"/usr/local/man:$MANPATH\" # You may need to manually set your language environment # export LANG=en_US.UTF-8 # Preferred editor for local and remote sessions # if [[ -n $SSH_CONNECTION ]]; then # export EDITOR='vim' # else # export EDITOR='mvim' # fi # Compilation flags # export ARCHFLAGS=\"-arch x86_64\" # Set personal aliases, overriding those provided by oh-my-zsh libs, # plugins, and themes. Aliases can be placed here, though oh-my-zsh # users are encouraged to define aliases within the ZSH_CUSTOM folder. # For a full list of active aliases, run `alias`. # # Example aliases # alias zshconfig=\"mate ~/.zshrc\" # alias ohmyzsh=\"mate ~/.oh-my-zsh\" #export DISPLAY=:0 export DISPLAY=$(ip route | awk '{print $3; exit}'):0 export LIBGL_ALWAYS_INDIRECT=1 export PYENV_ROOT=\"$HOME/.pyenv\" export PATH=\"$PYENV_ROOT/bin:$PATH\" if command -v pyenv 1\u003e/dev/null 2\u003e\u00261; then eval \"$(pyenv init -)\" fi alias em=\"emacsclient -nw\" #export NVM_DIR=\"$HOME/.nvm\" #[ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 \\. \"$NVM_DIR/nvm.sh\" # This loads nvm #[ -s \"$NVM_DIR/bash_completion\" ] \u0026\u0026 \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion export GDK_SCALE=2 # fix interop fix_wsl2_interop() { for i in $(pstree -np -s $$ | grep -o -E '[0-9]+'); do if [[ -e \"/run/WSL/${i}_interop\" ]]; then export WSL_INTEROP=/run/WSL/${i}_interop fi done } ~/.emacs.d/bin/doom env \u003e /dev/null 2\u003e\u00261 Export WSL (Backup WSL) wsl ships with a –export option for users to do export the WSL distro to a tar file which can be imported to other machines:\n1 wsl --export Ubuntu-18.04 Ubuntu-18.04_20200905 An Emacs Shortcut Create two file in desktop: Emacs.sh and Emacs.bat\nEmacs.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cd ~ export DISPLAY=$(ip route | awk '{print $3; exit}'):0 export LIBGL_ALWAYS_INDIRECT=1 export PYENV_ROOT=\"$HOME/.pyenv\" export PATH=\"$PYENV_ROOT/bin:$PATH\" if command -v pyenv 1\u003e/dev/null 2\u003e\u00261; then eval \"$(pyenv init -)\" fi alias em=\"emacsclient -nw\" export NVM_DIR=\"$HOME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 \\. \"$NVM_DIR/nvm.sh\" # This loads nvm [ -s \"$NVM_DIR/bash_completion\" ] \u0026\u0026 \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion # export GDK_SCALE=2 emacs Emacs.bat 1 2 @echo off wsl ./emacs.sh Double click Emacs.bat to launch Emacs. Some Emacs hacking ideas It is very easy to use Emacs to interactive with Windows’s programs, such as browsing the URL with Chrome, open the PDF file with Acrobat Reader DC, open the current file with default program, launch explorer.exe, etc. Here are some ideas:\nBrowser URL with default browser 1 2 3 4 (defun wsl-browse-url-xdg-open (url \u0026optional ignored) (interactive (browse-url-interactive-arg \"URL: \")) (shell-command-to-string (concat \"explorer.exe \" url))) (advice-add #'browse-url-xdg-open :override #'wsl-browse-url-xdg-open) If you a calibredb user, you can add the following advice to open the PDF/EPUB with windows default programs 1 2 3 4 5 6 ;; calibredb (defun wslcalibredb-open-with-default-tool (filepath) (shell-command-to-string (concat \"cd \" (shell-quote-argument (file-name-directory (expand-file-name filepath))) \" \u0026\u0026 \" (concat \"cmd.exe /C start '' \\\"${@//\u0026/^\u0026}\\\" \" (shell-quote-argument (file-name-nondirectory filepath)))))) (advice-add #'calibredb-open-with-default-tool :override #'wslcalibredb-open-with-default-tool) Open the file with windows default programs or reveal it in explorer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ;;;###autoload (defmacro wsl--open-with (id \u0026optional app dir) `(defun ,(intern (format \"wsl/%s\" id)) () (interactive) (wsl-open-with ,app ,dir))) (defun wsl-open-with (\u0026optional app-name path) \"Send PATH to APP-NAME on WSL.\" (interactive) (let* ((path (expand-file-name (replace-regexp-in-string \"'\" \"\\\\'\" (or path (if (derived-mode-p 'dired-mode) (dired-get-file-for-visit) (buffer-file-name))) nil t))) (command (format \"%s `wslpath -w %s`\" (shell-quote-argument app-name) path))) (shell-command-to-string command))) (wsl--open-with open-in-default-program \"explorer.exe\" buffer-file-name) (wsl--open-with reveal-in-explorer \"explorer.exe\" default-directory) 1 2 M-x wsl/open-in-default-program M-x wsl/reveal-in-explorer References WSL 2 Support is coming to Windows 10 Versions 1903 and 1909 | Windows Comman… Ubuntu on WSL 2 Is Generally Available | Ubuntu https://github.com/microsoft/WSL/issues/5336 https://en.wikipedia.org/wiki/Windows%5FSubsystem%5Ffor%5FLinux https://docs.microsoft.com/en-us/windows/wsl/wsl2-index https://docs.microsoft.com/en-us/windows/wsl/compare-versions https://github.com/microsoft/terminal/issues/1379 https://github.com/microsoft/terminal https://docs.microsoft.com/en-us/windows/terminal/customize-settings/profile-settings https://stackoverflow.com/questions/61110603/how-to-set-up-working-x11-forwarding-on-wsl2 https://superuser.com/questions/1196399/how-do-i-set-the-size-of-the-x-mouse-pointer-in-the-windows-subsystem-for-linux https://github.com/hubisan/emacs-wsl https://stackoverflow.com/questions/27022373/python3-importerror-no-module-named-ctypes-when-using-value-from-module-mul https://docs.microsoft.com/en-us/windows/nodejs/setup-on-wsl2 https://github.com/microsoft/WSL/issues/5065 https://docs.microsoft.com/en-us/windows/wsl/interop ","description":"","tags":["windows","emacs","wsl2"],"title":"The ultimate Emacs hacking tutorial in Windows 10 WSL 2","uri":"/post/windows-setup/"},{"categories":["Technology"],"content":"Calibredb Emacs 的电子书管理方案。 这个包利用 calibredb ，将 calibre 的工作流完美的融入到 Emacs，打造一体化的电子书/文档的管理方案。\n下载链接 https://github.com/chenyanming/calibredb.el\n","description":"","tags":["emacs"],"title":"Calibredb － Emacs 的电子书管理方案","uri":"/post/20200823-calibredb/"},{"categories":["Technology"],"content":"什么是 inherit-org？ inherit-org 是一个 emacs 的插件（package），也是 shrface 的应用扩展，它能让 shrface 的样式（Faces）扩展到更多的非 org buffers。目前支持以下的 Major Modes。\nw3m mode\n继承 org faces Minor mode: inherit-org-mode imenu outline-minor-mode org-indent-mode Info mode\n继承 org faces helpful mode\n继承 org faces Minor mode: inherit-org-mode imenu outline-minor-mode org-indent-mode 其他 Major Modes\nFunction: inherit-org-fontify-buffer 下载链接 https://github.com/chenyanming/inherit-org 截图 ","description":"","tags":["emacs"],"title":"inherit-org，让非 org buffers 也拥有 org 的阅读体验","uri":"/post/20200419195645-shrface_plus/"},{"categories":["Technology"],"content":"什么是 shrface？ shrface 是一个 emacs 的插件（package），它可以让你在 emacs 里像 org mode 一样浏览网页， 阅读 epub 电子书，看电子邮件，又或者是技术文档。\n下载链接 https://github.com/chenyanming/shrface https://emacs-china.org/t/new-package-shrface-eww-dash-doc-nov-mu4e-org/12644 https://www.reddit.com/r/emacs/comments/fyd2o8/new%5Fpackage%5Fshrface%5Fa%5Fshr%5Ffaces%5Fpackage%5Forg%5Flike/ 截图 ","description":"","tags":["emacs"],"title":"shrface，让 eww, mu4e, nov.el 拥有 org 的阅读体验","uri":"/post/20200419193603-shrface_%E8%AE%A9eww_nov_mu4e%E6%8B%A5%E6%9C%89org%E7%9A%84%E9%98%85%E8%AF%BB%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"About Me My name is Damon Chan. I live in Tokyo.\nI love programming, writing, and sharing thought-provoking ideas—believing that only the ideas we truly live have real value. An Emacs hacker at heart and an entrepreneur in spirit, I turn curiosity into creation and ideas into impact.\nContact Me Email: elecming@gmail.com Github: https://github.com/chenyanming X: https://twitter.com/elecming Reddit: https://www.reddit.com/user/DR_MING/ Medium: https://medium.com/@elecming Substack: https://substack.com/@elecming Telegram: https://t.me/elecming ","description":"","tags":null,"title":"About","uri":"/post/about/"}]
